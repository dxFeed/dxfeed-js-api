{"version":3,"sources":["webpack:///../src/usage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,gCAAe,0BAAYC,WAAW,KAAvB,wBAAf,YACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uCAIL,gDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6IAOL,iBAAQ,CACN,GAAM,eADR,eAGA,mEACA,sBACE,kBAAIA,WAAW,MAAf,QAA6B,sBAAQA,WAAW,MAAK,kBAAIA,WAAW,UAAf,cACrD,kBAAIA,WAAW,MAAf,YAAiC,sBAAQA,WAAW,MAAK,kBAAIA,WAAW,UAAf,eACzD,kBAAIA,WAAW,MAAf,iBAAsC,sBAAQA,WAAW,MAAK,kBAAIA,WAAW,UAAf,gBAEhE,4BAAW,kBAAIA,WAAW,KAAf,QAAX,kEACF,kBAAIA,WAAW,KAAf,QADE,iEAEE,kBAAIA,WAAW,KAAf,YAFF,4DAGF,kBAAIA,WAAW,KAAf,iBAHE,qCAIA,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qCAIL,iBAAQ,CACN,GAAM,gCADR,iCAGA,iDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8BAIL,sDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qCAIL,oEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAIL,iBAAQ,CACN,GAAM,kCADR,mCAGA,yEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wJAQL,wGACA,2JAA0I,6BAAGA,WAAW,KAAQ,CAC5J,KAAQ,oEAD8H,mEAA1I,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uLASL,qFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iEAML,iBAAQ,CACN,GAAM,sBADR,sBAGA,wHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0GAML,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,8GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6JAUL,iBAAQ,CACN,GAAM,iCADR,iCAGA,+FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAOL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8B,6LAQTJ,EAAWK,gBAAiB","file":"component---src-usage-mdx-7aaefe6bd81558f0b966.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dmitry.petrov/Workspace/dxfeed-js-api/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"nodejs-usage\"\n    }}>{`NodeJS usage`}</h1>\n    <p>{`Install `}<inlineCode parentName=\"p\">{`cometd-nodejs-client`}</inlineCode>{` package`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install cometd-nodejs-client\n`}</code></pre>\n    <p>{`and use it in your code`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`require('cometd-nodejs-client').adapt()\n// or\nimport * as CometdNodejsClient from 'cometd-nodejs-client'\nCometdNodejsClient.adapt()\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h1>\n    <p>{`We have several classes in implementation:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Feed `}<strong parentName=\"li\"><em parentName=\"strong\">{`(public)`}</em></strong></li>\n      <li parentName=\"ul\">{`Endpoint `}<strong parentName=\"li\"><em parentName=\"strong\">{`(private)`}</em></strong></li>\n      <li parentName=\"ul\">{`Subscriptions `}<strong parentName=\"li\"><em parentName=\"strong\">{`(private)`}</em></strong></li>\n    </ul>\n    <p>{`The `}<em parentName=\"p\">{`Feed`}</em>{` is entry point for configuration and creating subscriptions.\n`}<em parentName=\"p\">{`Feed`}</em>{` manages private classes for connecting and subscribing.\nThe `}<em parentName=\"p\">{`Endpoint`}</em>{` is responsible for managing the web socket connection.\n`}<em parentName=\"p\">{`Subscriptions`}</em>{` for managing open subscriptions.`}</p>\n    <h2 {...{\n      \"id\": \"import-package\"\n    }}>{`Import package`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import Feed from '@dxfeed/api'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure--create-connection\"\n    }}>{`Configure & Create connection`}</h2>\n    <p>{`Create instance of Feed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const feed = new Feed()\n`}</code></pre>\n    <p>{`Provide auth token if needed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`feed.setAuthToken('authToken')\n`}</code></pre>\n    <p>{`Set web socket address and open connection.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`feed.connect('wss://demo.dxfeed.com/webservice/cometd')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure--create-subscription\"\n    }}>{`Configure & Create subscription`}</h2>\n    <p>{`You should specify event types and symbol names.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`feed.subscribe<{ value: number }>(\n  [EventType.Summary, EventType.Trade] /* event types */,\n  ['AEX.IND:TEI'] /* symbols */,\n  handleEvent\n)\n`}</code></pre>\n    <p>{`For timed subscription you should also provide time to start subscription from.`}</p>\n    <p>{`For Candle event type along with base symbol, you should specify an aggregation period. You can also set price type. More details: `}<a parentName=\"p\" {...{\n        \"href\": \"https://kb.dxfeed.com/display/DS/REST+API#RESTAPI-Candlesymbols\"\n      }}>{`https://kb.dxfeed.com/display/DS/REST+API#RESTAPI-Candlesymbols`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`feed.subscribeTimeSeries<{ value: number }>(\n  [EventType.Summary, EventType.Trade] /* event types */,\n  ['AEX.IND:TEI'] /* symbols */,\n  0 /* fromTime */,\n  handleEvent\n)\n`}</code></pre>\n    <p>{`Last argument its event handler for process incoming events.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const handleEvent = (event) => {\n  /* process event */\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"close-subscription\"\n    }}>{`Close subscription`}</h2>\n    <p>{`All subscribe methods return unsubscribe handler, you need to call this method for unsubscribe.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const unsubscribe = feed.subscribe(eventTypes, symbols, handleEvent)\n\nonExit(() => unsubscribe())\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"aggregated-api\"\n    }}>{`Aggregated API`}</h2>\n    <h3 {...{\n      \"id\": \"get-timeseries\"\n    }}>{`Get TimeSeries`}</h3>\n    <p>{`If you want to get TimeSeries events for a given time period, refer to example below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// inside async function\nconst events = await feed.getTimeSeries(\n  'AAPL{=15m}',\n  EventType.Candle,\n  fromDate.getTime(),\n  toDate.getTime()\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"subscribe-timeseries-snapshot\"\n    }}>{`Subscribe TimeSeries snapshot`}</h3>\n    <p>{`If you want to subscribe to TimeSeries events, refer to example below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const unsubscribe = feed.subscribeTimeSeriesSnapshot('AAPL{=15m}', EventType.Candle, (candles) => {\n  // process candles\n  chart.setCandles(candles)\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"close-connection\"\n    }}>{`Close connection`}</h2>\n    <p>{`If you need to close the web socket connection`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`feed.disconnect()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}